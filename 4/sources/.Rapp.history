source("better.R")
getRunsMatrix<-function(n, runLength) {#
	heads<-rep(1, runLength);#
	tails<-rep(0, n-runLength+1);#
	data<-c(#
		rep(c(heads,tails),n-runLength),#
		heads#
	);#
	return(matrix(data=data,ncol=n,byrow=TRUE));#
}#
#
getFlipsMatrix<-function(n) {#
	return(rbinom(n,1,0.5));#
}#
#
testForRuns<-function(flips, runs) {#
	prod<- runs %*% flips;#
	return(runLength %in% prod);#
}
flips<-getFlipsMatrix(100)
runs<-getRunsMatrix(100,7)
testForRuns(flips,runs)
source("better.R")
getRunsMatrix<-function(n, runLength) {#
	heads<-rep(1, runLength);#
	tails<-rep(0, n-runLength+1);#
	data<-c(#
		rep(c(heads,tails),n-runLength),#
		heads#
	);#
	return(matrix(data=data,ncol=n,byrow=TRUE));#
}#
#
getFlipsMatrix<-function(n) {#
	return(rbinom(n,1,0.5));#
}#
#
testForRuns<-function(flips, runs, runLength) {#
	prod<- runs %*% flips;#
	return(runLength %in% prod);#
}#
#
getProbability<-function(n=100, runLength=7, tests= 5000) {#
	runs<-getRunsMatrix(n, runLength);#
	passed= 0;#
	for(i in 1:tests) {#
		flips<-getFlipsMatrix(n);#
		if(testForRuns(flips, runs, runLength)){#
			passed= passed+1;#
		}#
	}#
	return(passed/tests);#
}#
#
print(getProbability());
getProbability()
getRunsMatrix<-function(n, runLength) {#
	heads<-rep(1, runLength);#
	tails<-rep(0, n-runLength+1);#
	data<-c(#
		rep(c(heads,tails),n-runLength),#
		heads#
	);#
	return(matrix(data=data,ncol=n,byrow=TRUE));#
}#
#
getFlipsMatrix<-function(n) {#
	return(rbinom(n,1,0.5));#
}#
#
testForRuns<-function(flips, runs, runLength) {#
	prod<- runs %*% flips;#
	return(runLength %in% prod);#
}#
#
getProbability<-function(n=100, runLength=7, tests= 5000) {#
	runs<-getRunsMatrix(n, runLength);#
	passed= 0;#
	for(i in 1:tests) {#
		flips<-getFlipsMatrix(n);#
		if(testForRuns(flips, runs, runLength)){#
			passed= passed+1;#
		}#
	}#
	return(passed/tests);#
}#
#
for(i in 1:15) {#
	print(getProbability(100, i));#
}
getRunsMatrix<-function(n, runLength) {#
	heads<-rep(1, runLength);#
	tails<-rep(0, n-runLength+1);#
	data<-c(#
		rep(c(heads,tails),n-runLength),#
		heads#
	);#
	return(matrix(data=data,ncol=n,byrow=TRUE));#
}#
#
getFlipsMatrix<-function(n) {#
	return(rbinom(n,1,0.5));#
}#
#
testForRuns<-function(flips, runs, runLength) {#
	prod<- runs %*% flips;#
	return(runLength %in% prod);#
}#
#
getProbability<-function(n=100, runLength=7, tests= 5000) {#
	runs<-getRunsMatrix(n, runLength);#
	passed= 0;#
	for(i in 1:tests) {#
		flips<-getFlipsMatrix(n);#
		if(testForRuns(flips, runs, runLength)){#
			passed= passed+1;#
		}#
	}#
	return(passed/tests);#
}#
#
print(getProbability());
print(getProbability(tests=10000));
print(getProbability(tests=15000));
source("/Users/nakul/Desktop/school/Math 308/assignment2.R")
hasRun<-function(flips,length) {#
 	runLength=1;#
 	for(i in 2:length(flips)) {#
#
 		if(flips[i] == flips[i-1]) {#
 			runLength= runLength+1;#
 		} else {#
 			runLength= 1;#
 		}#
#
 		if(runLength == length) {#
 			return(TRUE);#
 		}#
 	}#
 	return(FALSE);#
 }#
#
simulate<-function(trials= 5000,length=7,n=100) {#
	success=0;#
	for (i in 1:trials) {#
		flips<-rbinom(n= n, prob= 0.5, size= 1);#
		if(hasRun(flips,length)) {#
			success= success+1;#
		}#
	}#
	prob= success/trials;#
	return(prob);#
}#
#
print(simulate(length=7))
simulate(length=7)
simulate(length=6)
getRunsMatrix<-function(n, runLength) {#
	heads<-rep(1, runLength);#
	tails<-rep(0, n-runLength+1);#
	data<-c(#
		rep(c(heads,tails),n-runLength),#
		heads#
	);#
	return(matrix(data=data,ncol=n,byrow=TRUE));#
}#
#
getFlipsMatrix<-function(n) {#
	return(rbinom(n,1,0.5));#
}#
#
testForRuns<-function(flips, runs, runLength) {#
	prod<- runs %*% flips;#
	return(runLength %in% prod);#
}#
#
getProbability<-function(n=100, runLength=7, tests= 5000) {#
	runs<-getRunsMatrix(n, runLength);#
	passed= 0;#
	for(i in 1:tests) {#
		flips<-getFlipsMatrix(n);#
		if(testForRuns(flips, runs, runLength)){#
			passed= passed+1;#
		}#
	}#
	return(passed/tests);#
}#
#
print(getProbability());
getRunsMatrix<-function(n, runLength) {#
	heads<-rep(1, runLength);#
	tails<-rep(0, n-runLength+1);#
	data<-c(#
		rep(c(heads,tails),n-runLength),#
		heads#
	);#
	return(matrix(data=data,ncol=n,byrow=TRUE));#
}#
#
getFlipsMatrix<-function(n) {#
	return(rbinom(n,1,0.5));#
}#
#
testForRuns<-function(flips, runs, runLength) {#
	prod<- runs %*% flips;#
	return(runLength %in% prod);#
}#
#
getProbability<-function(n=100, runLength=7, tests= 5000) {#
	runs<-getRunsMatrix(n, runLength);#
	passed= 0;#
	for(i in 1:tests) {#
		flips<-getFlipsMatrix(n);#
		if(testForRuns(flips, runs, runLength)){#
			passed= passed+1;#
		}#
	}#
	return(passed/tests);#
}#
#
print(getProbability());#
getRunsMatrix<-function(n, runLength) {#
	heads<-rep(1, runLength);#
	tails<-rep(0, n-runLength+1);#
	data<-c(#
		rep(c(heads,tails),n-runLength),#
		heads#
	);#
	return(matrix(data=data,ncol=n,byrow=TRUE));#
}#
#
getFlipsMatrix<-function(n) {#
	return(rbinom(n,1,0.5));#
}#
#
testForRuns<-function(flips, runs, runLength) {#
	prod<- runs %*% flips;#
	hasHeadRun= (runLength %in% prod);#
	hasTailRun= (0 %in% prod);#
}#
#
getProbability<-function(n=100, runLength=7, tests= 5000) {#
	runs<-getRunsMatrix(n, runLength);#
	passed= 0;#
	for(i in 1:tests) {#
		flips<-getFlipsMatrix(n);#
		if(testForRuns(flips, runs, runLength)){#
			passed= passed+1;#
		}#
	}#
	return(passed/tests);#
}#
#
print(getProbability());
getRunsMatrix<-function(n, runLength) {#
	heads<-rep(1, runLength);#
	tails<-rep(0, n-runLength+1);#
	data<-c(#
		rep(c(heads,tails),n-runLength),#
		heads#
	);#
	return(matrix(data=data,ncol=n,byrow=TRUE));#
}#
#
getFlipsMatrix<-function(n) {#
	return(rbinom(n,1,0.5));#
}#
#
testForRuns<-function(flips, runs, runLength) {#
	prod<- runs %*% flips;#
	hasHeadRun= (runLength %in% prod);#
	hasTailRun= (0 %in% prod);#
	return (hasHeadRun || hasTailRun);#
}#
#
getProbability<-function(n=100, runLength=7, tests= 5000) {#
	runs<-getRunsMatrix(n, runLength);#
	passed= 0;#
	for(i in 1:tests) {#
		flips<-getFlipsMatrix(n);#
		if(testForRuns(flips, runs, runLength)){#
			passed= passed+1;#
		}#
	}#
	return(passed/tests);#
}#
#
print(getProbability());
getRunsMatrix<-function(n, runLength) {#
	heads<-rep(1, runLength);#
	tails<-rep(0, n-runLength+1);#
	data<-c(#
		rep(c(heads,tails),n-runLength),#
		heads#
	);#
	return(matrix(data=data,ncol=n,byrow=TRUE));#
}#
#
getFlipsMatrix<-function(n) {#
	return(rbinom(n,1,0.5));#
}#
#
testForRuns<-function(flips, runs, runLength) {#
	prod<- runs %*% flips;#
	hasHeadRun= (runLength %in% prod);#
	hasTailRun= (0 %in% prod);#
	return (hasHeadRun || hasTailRun);#
}#
#
getProbability<-function(n=100, runLength=7, tests= 5000) {#
	runs<-getRunsMatrix(n, runLength);#
	passed= 0;#
	for(i in 1:tests) {#
		flips<-getFlipsMatrix(n);#
		if(testForRuns(flips, runs, runLength)){#
			passed= passed+1;#
		}#
	}#
	return(passed/tests);#
}#
#
for(i in 1:25) {#
	print(getProbability(runLength= i));#
}
getRunsMatrix<-function(n, runLength) {#
	heads<-rep(1, runLength);#
	tails<-rep(0, n-runLength+1);#
	data<-c(#
		rep(c(heads,tails),n-runLength),#
		heads#
	);#
	return(matrix(data=data,ncol=n,byrow=TRUE));#
}#
#
getFlipsMatrix<-function(n) {#
	return(rbinom(n,1,0.5));#
}#
#
testForRuns<-function(flips, runs, runLength) {#
	prod<- runs %*% flips;#
	hasHeadRun= (runLength %in% prod);#
	hasTailRun= (0 %in% prod);#
	return (hasHeadRun);#
}#
#
getProbability<-function(n=100, runLength=7, tests= 5000) {#
	runs<-getRunsMatrix(n, runLength);#
	passed= 0;#
	for(i in 1:tests) {#
		flips<-getFlipsMatrix(n);#
		if(testForRuns(flips, runs, runLength)){#
			passed= passed+1;#
		}#
	}#
	return(passed/tests);#
}#
#
for(i in 1:25) {#
	print(getProbability(runLength= i));#
}
getRunsMatrix<-function(n, runLength) {#
	heads<-rep(1, runLength);#
	tails<-rep(0, n-runLength+1);#
	data<-c(#
		rep(c(heads,tails),n-runLength),#
		heads#
	);#
	return(matrix(data=data,ncol=n,byrow=TRUE));#
}#
#
getFlipsMatrix<-function(n) {#
	return(rbinom(n,1,0.5));#
}#
#
testForRuns<-function(flips, runs, runLength) {#
	prod<- runs %*% flips;#
	return(runLength %in% prod);#
}#
#
getProbability<-function(n=100, runLength=7, tests= 5000) {#
	runs<-getRunsMatrix(n, runLength);#
	passed= 0;#
	for(i in 1:tests) {#
		flips<-getFlipsMatrix(n);#
		if(testForRuns(flips, runs, runLength)){#
			passed= passed+1;#
		}#
	}#
	return(passed/tests);#
}#
#
print(getProbability());
getRunsMatrix(1,1)
getRunsMatrix(2,1)
for(i in 1:5) {}
for(i in 1:5) {
for(j in 1:i) {
getRunsMatrix(i,j)}}
for(i in 1:5) {
for(j in 1:i) {
getRunsMatrix(i,j);
}
> for(i in 1:5) {#
+ for(j in 1:i) {
for(i in 1:5){for(j in 1:i){
print(getRunsMatrix(i,j));}}
for(i in 1:5) {#
	for(j in 1:i) {#
		print(getRunsMatrix(i,j));#
	}#
}
}
for(i in 1:5) {#
	for(j in 1:i) {#
		print(getRunsMatrix(i,j));#
	}#
}
for(i in 1:10) {#
	for(j in 1:i) {#
		print(getFlipsMatrix(i,j));#
}
}
for(i in 1:10) {#
	for(j in 1:i) {#
		print(getFlipsMatrix(i));#
	}#
}
getFlipsMatrix(10000)
?.Random.seed
library(random)
randomNumbers(min=0, max=100)
randomNumbers(min=0, max=100, col=100)
randomQuota()
randomNumbers(min=0, max=100, col=100)
randomQuota()
library(random)#
#
#Creates a matrix enumerating all possible runs of heads#
#Eg. for 3-runs amongst 5 coin flips, returns:#
#11100#
#01110#
#00111#
getRunsMatrix<-function(n, runLength) {#
	heads<-rep(1, runLength);#
	tails<-rep(0, n-runLength+1);#
	data<-c(#
		rep(c(heads,tails),n-runLength),#
		heads#
	);#
	return(matrix(data=data,ncol=n,byrow=TRUE));#
}#
#
#Creates a (pseudo-randomly generated) vector of coin flips#
getFlipsMatrix<-function(n) {#
	#return(rbinom(n,1,0.5));#
	return randomNumbers(min=0, max= 1, col=100)#
}#
#
#Tests a particular sequence of flips for#
#presence of a given length of run#
testForRuns<-function(flips, runs, runLength) {#
	prod<- runs %*% flips;#
	return(runLength %in% prod);#
}#
#
#Monte-Carlo simulation to determine probability#
getProbability<-function(n=100, runLength=7, tests= 5000) {#
	runs<-getRunsMatrix(n, runLength);#
	passed= 0;#
	for(i in 1:tests) {#
		flips<-getFlipsMatrix(n);#
		if(testForRuns(flips, runs, runLength)){#
			passed= passed+1;#
		}#
	}#
	return(passed/tests);#
}#
#
#Run the test#
print(getProbability());
randomQuota()
print(getProbability());
randomQuota()
getProbability()
randomQuota()
library(random)#
#
#Creates a matrix enumerating all possible runs of heads#
#Eg. for 3-runs amongst 5 coin flips, returns:#
#11100#
#01110#
#00111#
getRunsMatrix<-function(n, runLength) {#
	heads<-rep(1, runLength);#
	tails<-rep(0, n-runLength+1);#
	data<-c(#
		rep(c(heads,tails),n-runLength),#
		heads#
	);#
	return(matrix(data=data,ncol=n,byrow=TRUE));#
}#
#
#Creates a (pseudo-randomly generated) vector of coin flips#
getFlipsMatrix<-function(n) {#
	#return(rbinom(n,1,0.5));#
	return(randomNumbers(min=0, max= 1, col=100));#
}#
#
#Tests a particular sequence of flips for#
#presence of a given length of run#
testForRuns<-function(flips, runs, runLength) {#
	prod<- runs %*% flips;#
	return(runLength %in% prod);#
}#
#
#Monte-Carlo simulation to determine probability#
getProbability<-function(n=100, runLength=7, tests= 5000) {#
	runs<-getRunsMatrix(n, runLength);#
	passed= 0;#
	for(i in 1:tests) {#
		flips<-getFlipsMatrix(n);#
		if(testForRuns(flips, runs, runLength)){#
			passed= passed+1;#
		}#
	}#
	return(passed/tests);#
}#
#
#Run the test#
print(getProbability());
flips<-getFlipsMatrix(100)
runs<-getRunsMatrlibrary(random)#
#
#Creates a matrix enumerating all possible runs of heads#
#Eg. for 3-runs amongst 5 coin flips, returns:#
#11100#
#01110#
#00111#
getRunsMatrix<-function(n, runLength) {#
	heads<-rep(1, runLength);#
	tails<-rep(0, n-runLength+1);#
	data<-c(#
		rep(c(heads,tails),n-runLength),#
		heads#
	);#
	return(matrix(data=data,ncol=n,byrow=TRUE));#
}#
#
#Creates a (pseudo-randomly generated) vector of coin flips#
getFlipsMatrix<-function(n) {#
	#return(rbinom(n,1,0.5));#
	return(randomNumbers(min=0, max= 1, col=1, n=100));#
}#
#
#Tests a particular sequence of flips for#
#presence of a given length of run#
testForRuns<-function(flips, runs, runLength) {#
	prod<- runs %*% flips;#
	return(runLength %in% prod);#
}#
#
#Monte-Carlo simulation to determine probability#
getProbability<-function(n=100, runLength=7, tests= 5000) {#
	runs<-getRunsMatrix(n, runLength);#
	passed= 0;#
	for(i in 1:tests) {#
		flips<-getFlipsMatrix(n);#
		if(testForRuns(flips, runs, runLength)){#
			passed= passed+1;#
		}#
	}#
	return(passed/tests);#
}#
#
#Run the test#
print(getProbability());
library(random)#
#
#Creates a matrix enumerating all possible runs of heads#
#Eg. for 3-runs amongst 5 coin flips, returns:#
#11100#
#01110#
#00111#
getRunsMatrix<-function(n, runLength) {#
	heads<-rep(1, runLength);#
	tails<-rep(0, n-runLength+1);#
	data<-c(#
		rep(c(heads,tails),n-runLength),#
		heads#
	);#
	return(matrix(data=data,ncol=n,byrow=TRUE));#
}#
#
#Creates a (pseudo-randomly generated) vector of coin flips#
getFlipsMatrix<-function(n) {#
	#return(rbinom(n,1,0.5));#
	return(randomNumbers(min=0, max= 1, col=1, n=100));#
	print(randomQuota());#
}#
#
#Tests a particular sequence of flips for#
#presence of a given length of run#
testForRuns<-function(flips, runs, runLength) {#
	prod<- runs %*% flips;#
	return(runLength %in% prod);#
}#
#
#Monte-Carlo simulation to determine probability#
getProbability<-function(n=100, runLength=7, tests= 5000) {#
	runs<-getRunsMatrix(n, runLength);#
	passed= 0;#
	for(i in 1:tests) {#
		flips<-getFlipsMatrix(n);#
		if(testForRuns(flips, runs, runLength)){#
			passed= passed+1;#
		}#
	}#
	return(passed/tests);#
}#
#
#Run the test#
print(getProbability());
getFlipsMatrix(100)
randomQuota()
testForRuns(getFlipsMatrix(100),getRunsMatrix(100,7),7)
randomQuota()
library(random)#
#
#Creates a matrix enumerating all possible runs of heads#
#Eg. for 3-runs amongst 5 coin flips, returns:#
#11100#
#01110#
#00111#
getRunsMatrix<-function(n, runLength) {#
	heads<-rep(1, runLength);#
	tails<-rep(0, n-runLength+1);#
	data<-c(#
		rep(c(heads,tails),n-runLength),#
		heads#
	);#
	return(matrix(data=data,ncol=n,byrow=TRUE));#
}#
#
#Creates a (pseudo-randomly generated) vector of coin flips#
getFlipsMatrix<-function(n) {#
	#return(rbinom(n,1,0.5));#
	print(randomQuota());#
	return(randomNumbers(min=0, max= 1, col=1, n=100));#
}#
#
#Tests a particular sequence of flips for#
#presence of a given length of run#
testForRuns<-function(flips, runs, runLength) {#
	prod<- runs %*% flips;#
	return(runLength %in% prod);#
}#
#
#Monte-Carlo simulation to determine probability#
getProbability<-function(n=100, runLength=7, tests= 5000) {#
	runs<-getRunsMatrix(n, runLength);#
	passed= 0;#
	for(i in 1:tests) {#
		flips<-getFlipsMatrix(n);#
		if(testForRuns(flips, runs, runLength)){#
			passed= passed+1;#
		}#
	}#
	return(passed/tests);#
}#
#
#Run the test#
print(getProbability());
Creates a matrix enumerating all possible runs of heads#
#Eg. for 3-runs amongst 5 coin flips, returns:#
#11100#
#01110#
#00111#
getRunsMatrix<-function(n, runLength) {#
	heads<-rep(1, runLength);#
	tails<-rep(0, n-runLength+1);#
	data<-c(#
		rep(c(heads,tails),n-runLength),#
		heads#
	);#
	return(matrix(data=data,ncol=n,byrow=TRUE));#
}#
#
#Creates a (pseudo-randomly generated) vector of coin flips#
getFlipsMatrix<-function(n) {#
	return(rbinom(n,1,0.5));#
}#
#
#Tests a particular sequence of flips for#
#presence of a given length of run#
testForRuns<-function(flips, runs, runLength) {#
	prod<- runs %*% flips;#
	return(runLength %in% prod);#
}#
#
#Monte-Carlo simulation to determine probability#
getProbability<-function(n=100, runLength=7, tests= 5000) {#
	runs<-getRunsMatrix(n, runLength);#
	passed= 0;#
	for(i in 1:tests) {#
		flips<-getFlipsMatrix(n);#
		if(testForRuns(flips, runs, runLength)){#
			passed= passed+1;#
		}#
	}#
	return(passed/tests);#
}#
#
#Run the test#
print(getProbability());
runs<-getRunsMatrix(7,3)
runs
flips<-getFlipsMatrix(7)
flips
flips<-getFlipsMatrix(7)
flips
flips<-getFlipsMatrix(7)
flips
flips<-getFlipsMatrix(7)
flips
flips<-getFlipsMatrix(7)
flips
flips<-getFlipsMatrix(7)
flips
?sample
0:1
Creates a matrix enumerating all possible runs of heads#
#Eg. for 3-runs amongst 5 coin flips, returns:#
#11100#
#01110#
#00111#
getRunsMatrix<-function(n, runLength) {#
	heads<-rep(1, runLength);#
	tails<-rep(0, n-runLength+1);#
	data<-c(#
		rep(c(heads,tails),n-runLength),#
		heads#
	);#
	return(matrix(data=data,ncol=n,byrow=TRUE));#
}#
#
#Creates a (pseudo-randomly generated) vector of coin flips#
getFlipsMatrix<-function(n) {#
	#return(rbinom(n,1,0.5));#
	return(sample(0:1, n, replace=TRUE));#
}#
#
#Tests a particular sequence of flips for#
#presence of a given length of run#
testForRuns<-function(flips, runs, runLength) {#
	prod<- runs %*% flips;#
	return(runLength %in% prod);#
}#
#
#Monte-Carlo simulation to determine probability#
getProbability<-function(n=100, runLength=7, tests= 5000) {#
	runs<-getRunsMatrix(n, runLength);#
	passed= 0;#
	for(i in 1:tests) {#
		flips<-getFlipsMatrix(n);#
		if(testForRuns(flips, runs, runLength)){#
			passed= passed+1;#
		}#
	}#
	return(passed/tests);#
}#
#
#Run the test#
print(getProbability());
flips<-getFlipsMatrix(7)
flips
flips<-getFlipsMatrix(7)
flips
flips<-getFlipsMatrix(7)
getFlipsMatrix()
getFlipsMatrix(7)
sample(0:1, n, replace=TRUE)
sample(0:1, 7, replace=TRUE)
Creates a matrix enumerating all possible runs of heads#
#Eg. for 3-runs amongst 5 coin flips, returns:#
#11100#
#01110#
#00111#
getRunsMatrix<-function(n, runLength) {#
	heads<-rep(1, runLength);#
	tails<-rep(0, n-runLength+1);#
	data<-c(#
		rep(c(heads,tails),n-runLength),#
		heads#
	);#
	return(matrix(data=data,ncol=n,byrow=TRUE));#
}#
#
#Creates a (pseudo-randomly generated) vector of coin flips#
getFlipsMatrix<-function(n) {#
	return(rbinom(n,1,0.5));#
}#
#
#Tests a particular sequence of flips for#
#presence of a given length of run#
testForRuns<-function(flips, runs, runLength) {#
	prod<- runs %*% flips;#
	return(runLength %in% prod);#
}#
#
#Monte-Carlo simulation to determine probability#
getProbability<-function(n=100, runLength=7, tests= 5000) {#
	runs<-getRunsMatrix(n, runLength);#
	passed= 0;#
	for(i in 1:tests) {#
		flips<-getFlipsMatrix(n);#
		if(testForRuns(flips, runs, runLength)){#
			passed= passed+1;#
		}#
	}#
	return(passed/tests);#
}#
#
#Run the test#
print(getProbability());
runs
flips
prod
prod<- runs %*% flips
prod
Creates a matrix enumerating all possible runs of heads#
#Eg. for 3-runs amongst 5 coin flips, returns:#
#11100#
#01110#
#00111#
getRunsMatrix<-function(n, runLength) {#
	heads<-rep(1, runLength);#
	tails<-rep(0, n-runLength+1);#
	data<-c(#
		rep(c(heads,tails),n-runLength),#
		heads#
	);#
	return(matrix(data=data,ncol=n,byrow=TRUE));#
}#
#
#Creates a (pseudo-randomly generated) vector of coin flips#
getFlipsMatrix<-function(n) {#
	return(rbinom(n,1,0.5));#
}#
#
#Tests a particular sequence of flips for#
#presence of a given length of run#
testForRuns<-function(flips, runs, runLength) {#
	prod<- runs %*% flips;#
	return(runLength %in% prod);#
}#
#
#Monte-Carlo simulation to determine probability#
getProbability<-function(n=100, runLength=7, tests= 5000) {#
	runs<-getRunsMatrix(n, runLength);#
	passed= 0;#
	for(i in 1:tests) {#
		flips<-getFlipsMatrix(n);#
		if(testForRuns(flips, runs, runLength)){#
			passed= passed+1;#
		}#
	}#
	return(passed/tests);#
}#
#
#Run the test#
print(getProbability());
runs
getRunsMatrix(100,7)
runs
runs<-getRunsMatrix(100,7)
runs
flips<-getFlipsMatrix(7)
flips
flips<-getFlipsMatrix(100)
flips
prod<-runs%*%flips
prod
7%in%prod
getProbability()
getFlipsMatrix(7)
getFlipsMatrix(100)
runs
7%in%(runs %*% getFlipsMatrix())
7%in%(runs %*% getFlipsMatrix(100))
list<-c(1,2,4,5,6,8,11,15)
list
data<-c(1,2,4,5,6,8,11,15)
data
mean(data)
stwd("school/Math 308/2-8")
setwd("school/Math 308/2-8")
flights<-read.csv("../Data/FlightDelays.csv")#
#
#a#
times<-flights$DepartTime#
times<-factor(times, levels= c("4-8am","8-Noon","Noon-4pm","4-8pm","8-Mid"),ordered= TRUE)#
table<-table(times)#
print(table)#
barplot(table)#
#
#b#
table<-table(flights$Day,flights$Delayed30)
flights$Day<-factor(flights$Days, levels=c("Monday", "Tuesday","Wednesday","Thursday","Friday","Saturday","Sunday"), ordered=TRUE)
flights$Day<-factor(flights$Day, levels=c("Monday", "Tuesday","Wednesday","Thursday","Friday","Saturday","Sunday"), ordered=TRUE)
table<-table(flights$Day,flights$Delayed30)
table
flights
